# Generated by Django 4.0.1 on 2022-01-22 10:59

from django.conf import settings
from django.contrib.auth.management import create_permissions
from django.db import migrations, models
import django.db.models.deletion


def add_permissions_to_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    gestores = Group.objects.get(name='Gestores')
    editar_evaluadores = Permission.objects.get(codename='editar_evaluadores')
    gestores.permissions.add(editar_evaluadores)


def migrate_permissions(apps, schema_editor):
    """Create the pending permissions.

    Permissions are not actually created during or after an individual migration,
    but are triggered by a post-migrate signal which is sent after the
    `python manage.py migrate` command completes successfully.

    This is necessary so that we can add the permission to a group in this migration.
    """
    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, apps=apps, verbosity=2)
        app_config.models_module = None


def remove_permissions_from_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    gestores = Group.objects.get(name='Gestores')
    editar_evaluador = Permission.objects.get(codename='editar_evaluador')
    gestores.permissions.remove(editar_evaluador)


def remove_permissions(apps, schema_editor):
    Permission = apps.get_model('auth', 'Permission')
    editar_evaluador = Permission.objects.get(codename='editar_evaluador')
    editar_evaluador.delete()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('accounts', '0005_customuser_orcid'),
        ('indo', '0011_alter_proyecto_centro'),
    ]

    poblar_evaluadorproyecto = '''
    INSERT INTO indo_evaluadorproyecto (evaluador_id, proyecto_id, ha_evaluado)
    SELECT evaluador_id, id, esta_evaluado
    FROM indo_proyecto ip
    WHERE evaluador_id IS NOT NULL
    ORDER BY id;
    '''

    reverse_poblar_evaluadorproyecto = '''
    TRUNCATE indo_evaluadorproyecto;
    '''

    identificar_valoracion = '''
    UPDATE indo_valoracion iv
    JOIN indo_proyecto ip ON iv.proyecto_id = ip.id
    SET iv.evaluador_id = ip.evaluador_id;
    '''

    reverse_identificar_valoracion = '''
    UPDATE indo_valoracion
    SET evaluador_id = NULL;
    '''

    operations = [
        migrations.CreateModel(
            name='EvaluadorProyecto',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'ha_evaluado',
                    models.BooleanField(null=True, verbose_name='Ha realizado la evaluación'),
                ),
                (
                    'evaluador',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='evaluadores_proyectos',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AlterModelOptions(
            name='proyecto',
            options={
                'permissions': [
                    ('listar_proyectos', 'Puede ver el listado de todos los proyectos.'),
                    ('ver_proyecto', 'Puede ver cualquier proyecto.'),
                    ('editar_proyecto', 'Puede editar cualquier proyecto en cualquier momento.'),
                    (
                        'listar_evaluaciones',
                        'Puede ver el listado de evaluaciones de los proyectos.',
                    ),
                    ('listar_evaluadores', 'Puede ver el listado de evaluadores.'),
                    ('editar_evaluadores', 'Puede editar los evaluadores de un proyecto.'),
                    (
                        'editar_resolucion',
                        'Puede modificar la resolución de la Comisión Evaluadora.',
                    ),
                    ('listar_correctores', 'Puede ver el listado de correctores.'),
                    ('editar_corrector', 'Puede modificar el corrector de un proyecto.'),
                    ('ver_evaluacion', 'Puede ver la evaluación de cualquier proyecto.'),
                    ('ver_memorias', 'Puede ver el listado y cualquier memoria de proyecto.'),
                    ('ver_up', 'Puede ver el listado de UP y gastos de los proyectos.'),
                    ('ver_economico', 'Puede ver/editar el cierre económico de los proyectos.'),
                ]
            },
        ),
        migrations.AddField(
            model_name='proyecto',
            name='evaluadores',
            field=models.ManyToManyField(
                related_name='proyectos_del_evaluador',
                through='indo.EvaluadorProyecto',
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name='valoracion',
            name='evaluador',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='valoraciones',
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name='evaluadorproyecto',
            name='proyecto',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name='evaluadores_proyectos',
                to='indo.proyecto',
            ),
        ),
        migrations.AddConstraint(
            model_name='evaluadorproyecto',
            constraint=models.UniqueConstraint(
                fields=('evaluador_id', 'proyecto_id'), name='unique-evaluador-proyecto'
            ),
        ),
        migrations.RunPython(migrate_permissions),
        migrations.RunPython(add_permissions_to_groups),
        migrations.RunSQL(poblar_evaluadorproyecto, reverse_poblar_evaluadorproyecto),
        migrations.RunSQL(identificar_valoracion, reverse_identificar_valoracion),
        migrations.RunPython(migrate_permissions),
        migrations.RunPython(remove_permissions_from_groups),
        migrations.RunPython(remove_permissions),
    ]
