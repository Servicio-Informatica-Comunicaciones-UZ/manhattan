# Generated by Django 3.2 on 2021-05-25 06:26
# <https://docs.djangoproject.com/en/3.2/howto/writing-migrations/>

import django.core.validators
import django.db.models.deletion
from django.apps import apps as django_apps
from django.conf import settings
from django.contrib.auth.management import create_permissions
from django.db import migrations, models


def create_group(apps, schema_editor):
    group = apps.get_model('auth', 'Group')

    gestores, created = group.objects.get_or_create(name='Gestores')
    if created:
        print('Creado el grupo «Gestores».')

    correctores, created = group.objects.get_or_create(name='Correctores')
    if created:
        print('Creado el grupo «Correctores».')

    evaluadores, created = group.objects.get_or_create(name='Evaluadores')
    if created:
        print('Creado el grupo «Evaluadores».')


def indo_post_migrate_signal(apps, schema_editor):
    """Emit the post-migrate signal during the migration.

    Permissions are not actually created during or after an individual migration,
    but are triggered by a post-migrate signal which is sent after the
    `python manage.py migrate` command completes successfully.

    This is necessary so that permissions can be used later in this, or next, migration.
    """
    indo_config = django_apps.get_app_config('indo')
    models.signals.post_migrate.send(
        sender=indo_config,
        app_config=indo_config,
        verbosity=2,
        interactive=False,
        using=schema_editor.connection.alias,
    )


def migrate_permissions(apps, schema_editor):
    """Create the pending permissions.

    Permissions are not actually created during or after an individual migration,
    but are triggered by a post-migrate signal which is sent after the
    `python manage.py migrate` command completes successfully.

    This is necessary so that we can add the permission to a group in this migration.
    """
    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, apps=apps, verbosity=2)
        app_config.models_module = None


def add_permissions_to_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    gestores = Group.objects.get(name='Gestores')

    # Permisos para la interfaz de administración
    add_convocatoria = Permission.objects.get(codename='add_convocatoria')
    change_convocatoria = Permission.objects.get(codename='change_convocatoria')

    add_criterio = Permission.objects.get(codename='add_criterio')
    change_criterio = Permission.objects.get(codename='change_criterio')
    delete_criterio = Permission.objects.get(codename='delete_criterio')

    add_opcion = Permission.objects.get(codename='add_opcion')
    change_opcion = Permission.objects.get(codename='change_opcion')
    delete_opcion = Permission.objects.get(codename='delete_opcion')

    add_memoriaapartado = Permission.objects.get(codename='add_memoriaapartado')
    change_memoriaapartado = Permission.objects.get(codename='change_memoriaapartado')
    delete_memoriaapartado = Permission.objects.get(codename='delete_memoriaapartado')

    add_memoriasubapartado = Permission.objects.get(codename='add_memoriasubapartado')
    change_memoriasubapartado = Permission.objects.get(codename='change_memoriasubapartado')
    delete_memoriasubapartado = Permission.objects.get(codename='delete_memoriasubapartado')

    # Permisos para las vistas creadas
    listar_proyectos = Permission.objects.get(codename='listar_proyectos')
    ver_proyecto = Permission.objects.get(codename='ver_proyecto')
    editar_proyecto = Permission.objects.get(codename='editar_proyecto')
    listar_evaluadores = Permission.objects.get(codename='listar_evaluadores')
    editar_evaluador = Permission.objects.get(codename='editar_evaluador')
    editar_resolucion = Permission.objects.get(codename='editar_resolucion')
    listar_evaluaciones = Permission.objects.get(codename='listar_evaluaciones')
    gestionar_correctores = Permission.objects.get(codename='gestionar_correctores')
    asignar_correctores = Permission.objects.get(codename='asignar_correctores')
    ver_evaluacion = Permission.objects.get(codename='ver_evaluacion')
    ver_memorias = Permission.objects.get(codename='ver_memorias')
    ver_up = Permission.objects.get(codename='ver_up')
    ver_economico = Permission.objects.get(codename='ver_economico')

    gestores.permissions.add(
        add_convocatoria,
        change_convocatoria,
        add_criterio,
        change_criterio,
        delete_criterio,
        add_opcion,
        change_opcion,
        delete_opcion,
        add_memoriaapartado,
        change_memoriaapartado,
        delete_memoriaapartado,
        add_memoriasubapartado,
        change_memoriasubapartado,
        delete_memoriasubapartado,
        listar_proyectos,
        ver_proyecto,
        editar_proyecto,
        listar_evaluadores,
        editar_evaluador,
        editar_resolucion,
        listar_evaluaciones,
        gestionar_correctores,
        asignar_correctores,
        ver_evaluacion,
        ver_memorias,
        ver_up,
        ver_economico,
    )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RightsSupport',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
            ],
            options={
                'permissions': (
                    ('gestionar_correctores', 'Puede añadir/quitar usuarios al grupo Correctores'),
                    ('asignar_correctores', 'Puede asignar un corrector de memoria a un proyecto'),
                ),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Centro',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                (
                    'academico_id_nk',
                    models.IntegerField(blank=True, null=True, verbose_name='cód. académico'),
                ),
                (
                    'rrhh_id_nk',
                    models.CharField(
                        blank=True, max_length=4, null=True, verbose_name='cód. RRHH'
                    ),
                ),
                ('nombre', models.CharField(max_length=255)),
                (
                    'tipo_centro',
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name='tipo de centro'
                    ),
                ),
                (
                    'direccion',
                    models.CharField(
                        blank=True, max_length=140, null=True, verbose_name='dirección'
                    ),
                ),
                ('municipio', models.CharField(blank=True, max_length=100, null=True)),
                (
                    'telefono',
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name='teléfono'
                    ),
                ),
                (
                    'email',
                    models.EmailField(
                        blank=True, max_length=254, null=True, verbose_name='email address'
                    ),
                ),
                (
                    'url',
                    models.URLField(blank=True, max_length=255, null=True, verbose_name='URL'),
                ),
                (
                    'nip_decano',
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name='NIP del decano o director'
                    ),
                ),
                (
                    'nombre_decano',
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name='nombre del decano o director',
                    ),
                ),
                (
                    'email_decano',
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name='email del decano o director',
                    ),
                ),
                (
                    'tratamiento_decano',
                    models.CharField(
                        blank=True,
                        help_text='Decano/a ó director(a).',
                        max_length=25,
                        null=True,
                        verbose_name='cargo',
                    ),
                ),
                (
                    'nip_secretario',
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name='NIP del secretario'
                    ),
                ),
                (
                    'nombre_secretario',
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name='nombre del secretario'
                    ),
                ),
                (
                    'email_secretario',
                    models.EmailField(
                        blank=True, max_length=254, null=True, verbose_name='email del secretario'
                    ),
                ),
                (
                    'nips_coord_pou',
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name='NIPs de los coordinadores POU',
                    ),
                ),
                (
                    'nombres_coords_pou',
                    models.CharField(
                        blank=True,
                        max_length=1023,
                        null=True,
                        verbose_name='nombres de los coordinadores POU',
                    ),
                ),
                (
                    'emails_coords_pou',
                    models.CharField(
                        blank=True,
                        max_length=1023,
                        null=True,
                        verbose_name='emails de los coordinadores POU',
                    ),
                ),
                (
                    'unidad_planificacion',
                    models.CharField(
                        blank=True, max_length=3, null=True, verbose_name='unidad de planificación'
                    ),
                ),
                ('esta_activo', models.BooleanField(default=False, verbose_name='¿Activo?')),
            ],
            options={
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Convocatoria',
            fields=[
                (
                    'id',
                    models.PositiveSmallIntegerField(
                        primary_key=True, serialize=False, verbose_name='año'
                    ),
                ),
                (
                    'num_max_equipos',
                    models.PositiveSmallIntegerField(
                        default=4,
                        verbose_name='número máximo de equipos en que puede participar una persona',
                    ),
                ),
                (
                    'fecha_min_solicitudes',
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name='fecha en que se empiezan a aceptar solicitudes',
                    ),
                ),
                (
                    'fecha_max_solicitudes',
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name='fecha límite para presentar solicitudes',
                    ),
                ),
                (
                    'fecha_max_aceptos',
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name='fecha límite para aceptar participar en un proyecto',
                    ),
                ),
                (
                    'fecha_max_visto_buenos',
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name='fecha límite para que el decano/director dé el visto bueno a un proyecto',
                    ),
                ),
                (
                    'fecha_max_alegaciones',
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name='fecha límite para presentar alegaciones a la resolución de la comisión',
                    ),
                ),
                (
                    'fecha_max_aceptacion_resolucion',
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name='fecha límite para confirmar la aceptación del proyecto admitido',
                    ),
                ),
                (
                    'fecha_max_memorias',
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name='fecha límite para remitir la memoria final',
                    ),
                ),
                (
                    'fecha_max_gastos',
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name='fecha límite para incorporar los gastos',
                    ),
                ),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Criterio',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('parte', models.PositiveSmallIntegerField(verbose_name='parte')),
                ('peso', models.PositiveSmallIntegerField(verbose_name='peso')),
                ('descripcion', models.CharField(max_length=255, verbose_name='descripción')),
                (
                    'tipo',
                    models.CharField(
                        choices=[('opcion', 'Opción'), ('texto', 'Texto libre')],
                        max_length=15,
                        verbose_name='tipo',
                    ),
                ),
            ],
            options={
                'ordering': ('convocatoria', 'parte', 'peso'),
            },
        ),
        migrations.CreateModel(
            name='Departamento',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                (
                    'academico_id_nk',
                    models.IntegerField(
                        blank=True, db_index=True, null=True, verbose_name='cód. académico'
                    ),
                ),
                (
                    'rrhh_id_nk',
                    models.CharField(
                        blank=True, max_length=4, null=True, verbose_name='cód. RRHH'
                    ),
                ),
                ('nombre', models.CharField(blank=True, max_length=255, null=True)),
                (
                    'email',
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name='email del departamento',
                    ),
                ),
                (
                    'email_secretaria',
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name='email de la secretaría',
                    ),
                ),
                (
                    'nip_director',
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name='NIP del director'
                    ),
                ),
                (
                    'nombre_director',
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name='nombre del director'
                    ),
                ),
                (
                    'email_director',
                    models.EmailField(
                        blank=True, max_length=254, null=True, verbose_name='email del director'
                    ),
                ),
                (
                    'unidad_planificacion',
                    models.CharField(
                        blank=True, max_length=3, null=True, verbose_name='unidad de planificación'
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Estudio',
            fields=[
                (
                    'id',
                    models.PositiveSmallIntegerField(
                        primary_key=True, serialize=False, verbose_name='Cód. estudio'
                    ),
                ),
                ('nombre', models.CharField(max_length=255)),
                ('esta_activo', models.BooleanField(default=True, verbose_name='¿Activo?')),
                (
                    'rama',
                    models.CharField(
                        choices=[
                            ('B', 'Formación básica sin rama'),
                            ('H', 'Artes y Humanidades'),
                            ('J', 'Ciencias Sociales y Jurídicas'),
                            ('P', 'Títulos Propios'),
                            ('S', 'Ciencias de la Salud'),
                            ('T', 'Ingeniería y Arquitectura'),
                            ('X', 'Ciencias'),
                        ],
                        max_length=1,
                        verbose_name='rama',
                    ),
                ),
            ],
            options={
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('nombre', models.CharField(max_length=31, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Licencia',
            fields=[
                (
                    'identificador',
                    models.CharField(
                        help_text='Ver los identificadores estándar en https://spdx.org/licenses/',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ('nombre', models.CharField(max_length=255)),
                (
                    'url',
                    models.URLField(blank=True, max_length=255, null=True, verbose_name='URL'),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Linea',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('nombre', models.CharField(max_length=31)),
            ],
        ),
        migrations.CreateModel(
            name='MemoriaApartado',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('numero', models.PositiveSmallIntegerField(verbose_name='número')),
                ('descripcion', models.CharField(max_length=255, verbose_name='descripción')),
                (
                    'convocatoria',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='apartados_memoria',
                        to='indo.convocatoria',
                    ),
                ),
            ],
            options={
                'verbose_name': 'apartado de la memoria',
                'verbose_name_plural': 'apartados de la memoria',
                'ordering': ('convocatoria__id', 'numero'),
            },
        ),
        migrations.CreateModel(
            name='Opcion',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('puntuacion', models.PositiveSmallIntegerField(verbose_name='puntuación')),
                ('descripcion', models.CharField(max_length=255, verbose_name='descripción')),
                (
                    'criterio',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='opciones',
                        to='indo.criterio',
                    ),
                ),
            ],
            options={
                'verbose_name': 'opción',
                'verbose_name_plural': 'opciones',
                'ordering': ('criterio__parte', 'criterio__peso', 'puntuacion'),
            },
        ),
        migrations.CreateModel(
            name='Programa',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('nombre_corto', models.CharField(help_text='Ejemplo: PRACUZ', max_length=15)),
                (
                    'nombre_largo',
                    models.CharField(
                        help_text='Ejemplo: Programa de Recursos en Abierto para Centros',
                        max_length=127,
                    ),
                ),
                (
                    'max_ayuda',
                    models.PositiveSmallIntegerField(
                        null=True, verbose_name='Cuantía máxima que se puede solicitar de ayuda'
                    ),
                ),
                (
                    'max_estudiantes',
                    models.PositiveSmallIntegerField(
                        null=True, verbose_name='Número máximo de estudiantes por programa'
                    ),
                ),
                ('campos', models.TextField(null=True)),
                (
                    'requiere_visto_bueno_centro',
                    models.BooleanField(
                        default='False',
                        verbose_name='¿Requiere el visto bueno del director o decano?',
                    ),
                ),
                (
                    'requiere_visto_bueno_estudio',
                    models.BooleanField(
                        default='False',
                        verbose_name='¿Requiere el visto bueno del coordinador del plan de estudios?',
                    ),
                ),
                (
                    'convocatoria',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to='indo.convocatoria'
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Proyecto',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('codigo', models.CharField(max_length=31, null=True)),
                ('titulo', models.CharField(max_length=255, verbose_name='Título')),
                (
                    'descripcion',
                    models.TextField(
                        help_text='Resumen sucinto del proyecto. Máximo recomendable: un párrafo de 10 líneas.',
                        max_length=4095,
                        null=True,
                        verbose_name='Resumen',
                    ),
                ),
                (
                    'estado',
                    models.CharField(
                        choices=[
                            ('ANULADO', 'Solicitud anulada'),
                            ('BORRADOR', 'Solicitud en preparación'),
                            ('SOLICITADO', 'Solicitud presentada'),
                            ('DENEGADO', 'Denegado por la comisión evaluadora'),
                            ('APROBADO', 'Aprobado por la comisión evaluadora'),
                            ('RECHAZADO', 'Rechazado por el coordinador'),
                            ('ACEPTADO', 'Aceptado por el coordinador'),
                            ('MEM_PRESENTADA', 'Memoria presentada'),
                            ('MEM_NO_ADMITIDA', 'Memoria no admitida por el corrector'),
                            ('MEM_ADMITIDA', 'Memoria admitida por el corrector'),
                        ],
                        default='BORRADOR',
                        max_length=63,
                    ),
                ),
                (
                    'contexto',
                    models.TextField(
                        blank=True,
                        help_text='Necesidad a la que responde el proyecto, mejoras esperadas respecto al estado de la cuestión, conocimiento que se genera.',
                        null=True,
                        verbose_name='Contexto del proyecto',
                    ),
                ),
                (
                    'objetivos',
                    models.TextField(blank=True, null=True, verbose_name='Objetivos del Proyecto'),
                ),
                (
                    'metodos_estudio',
                    models.TextField(
                        blank=True,
                        help_text='Métodos/técnicas utilizadas, características de la muestra, actividades previstas por los estudiantes y por el equipo del proyecto, calendario de actividades.',
                        null=True,
                        verbose_name='Métodos de estudio/experimentación y trabajo de campo',
                    ),
                ),
                (
                    'mejoras',
                    models.TextField(
                        blank=True,
                        help_text='Método de evaluación, Resultados, Impacto (Eficiencia y Eficacia)',
                        null=True,
                        verbose_name='Mejoras esperadas en el proceso de enseñanza-aprendizaje y cómo se comprobarán.',
                    ),
                ),
                (
                    'continuidad',
                    models.TextField(
                        blank=True,
                        help_text='Transferibilidad, Sostenibilidad, Difusión prevista',
                        null=True,
                        verbose_name='Continuidad y Expansión',
                    ),
                ),
                (
                    'tipo',
                    models.TextField(
                        blank=True,
                        help_text='Experiencia, Estudio o Desarrollo',
                        null=True,
                        verbose_name='Tipo de proyecto',
                    ),
                ),
                (
                    'contexto_aplicacion',
                    models.TextField(
                        blank=True,
                        help_text='Centro, titulación, curso...',
                        null=True,
                        verbose_name='Contexto de aplicación/Público objetivo',
                    ),
                ),
                (
                    'metodos',
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name='Métodos/Técnicas/Actividades utilizadas',
                    ),
                ),
                (
                    'tecnologias',
                    models.TextField(blank=True, null=True, verbose_name='Tecnologías utilizadas'),
                ),
                (
                    'aplicacion',
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name='Posible aplicación a otros centros/áreas de conocimiento',
                    ),
                ),
                (
                    'proyectos_anteriores',
                    models.TextField(
                        blank=True,
                        help_text='Nombres de los proyectos de innovación realizados en cursos anteriores que estén relacionados con la temática propuesta.',
                        null=True,
                        verbose_name='Proyectos anteriores',
                    ),
                ),
                (
                    'impacto',
                    models.TextField(blank=True, null=True, verbose_name='Impacto del proyecto'),
                ),
                (
                    'innovacion',
                    models.TextField(
                        blank=True, null=True, verbose_name='Tipo de innovación introducida'
                    ),
                ),
                (
                    'interes',
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name='Interés y oportunidad para la institución/titulación/centro',
                    ),
                ),
                (
                    'justificacion_equipo',
                    models.TextField(
                        blank=True,
                        help_text='Experiencia común conjunta, experiencia previa en el tipo de curso solicitado, etc.',
                        null=True,
                        verbose_name='Justificación del equipo docente que conforma la solicitud',
                    ),
                ),
                (
                    'caracter_estrategico',
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name='Carácter estratégico del curso para la UZ',
                    ),
                ),
                (
                    'seminario',
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name='Asignatura, curso, seminario o equivalente',
                    ),
                ),
                (
                    'idioma',
                    models.TextField(blank=True, null=True, verbose_name='Idioma de publicación'),
                ),
                (
                    'ramas',
                    models.TextField(blank=True, null=True, verbose_name='Ramas de conocimiento'),
                ),
                (
                    'mejoras_pou',
                    models.TextField(
                        blank=True,
                        help_text='Método de evaluación, Resultados, Impacto (Eficiencia y Eficacia)',
                        null=True,
                        verbose_name='Mejoras esperadas en el Plan de Orientación Universitaria y cómo se comprobarán.',
                    ),
                ),
                (
                    'ambito',
                    models.TextField(
                        blank=True,
                        help_text="Consultar las áreas en el bloque derecho de <a href='https://ocw.unizar.es/ocw/course/index.php?categoryid=8' target='_blank'>https://ocw.unizar.es/ocw/course/index.php?categoryid=8</a>.",
                        null=True,
                        verbose_name='Ámbito o ámbitos correspondientes a su área de conocimiento',
                    ),
                ),
                (
                    'contenidos',
                    models.TextField(
                        blank=True,
                        help_text='Para OCW indicar los temas, que incluirán teoría, problemas, autoevaluación, etc.',
                        null=True,
                        verbose_name='Breve descripción de los contenidos',
                    ),
                ),
                (
                    'afectadas',
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name='Asignatura/s y Titulación/es afectadas',
                    ),
                ),
                (
                    'formatos',
                    models.TextField(
                        blank=True, null=True, verbose_name='Formatos de los materiales incluidos.'
                    ),
                ),
                (
                    'enlace',
                    models.TextField(
                        blank=True,
                        help_text='Incluir el enlace (o enlaces) a la página de los estudios en la que se encuentra el plan de mejora y una mención expresa a qué aspecto del mismo se refiere el proyecto.',
                        null=True,
                        verbose_name='Enlace',
                    ),
                ),
                (
                    'contenido_modulos',
                    models.TextField(
                        blank=True,
                        help_text='Los cursos 0 deberán incluir un capítulo 0 con las competencias demandadas al alumnado que va a comenzar el estudio o estudios objeto del curso.',
                        null=True,
                        verbose_name='Breve descripción de los contenidos de cada capítulo/módulo',
                    ),
                ),
                (
                    'material_previo',
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name='Indicar si se cuenta con algún material previo',
                    ),
                ),
                (
                    'duracion',
                    models.TextField(
                        blank=True,
                        help_text='Número de semanas y número de horas de estudio y trabajo autónomo del participante en todo el curso.',
                        null=True,
                        verbose_name='Duración del curso',
                    ),
                ),
                (
                    'multimedia',
                    models.TextField(
                        blank=True,
                        help_text='Elementos multimedia e innovadores que va a utilizar en la elaboración del curso.',
                        null=True,
                        verbose_name='Elementos multimedia e innovadores',
                    ),
                ),
                (
                    'indicadores',
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name='Indicadores para el seguimiento y evaluación del curso',
                    ),
                ),
                (
                    'actividades',
                    models.TextField(
                        blank=True,
                        help_text='Sólo obligatorias para MOOCs.',
                        null=True,
                        verbose_name='Actividades de dinamización previstas',
                    ),
                ),
                (
                    'financiacion',
                    models.TextField(
                        blank=True,
                        help_text='Justificar la necesidad de lo solicitado. Añadir información sobre otras fuentes de financiación.',
                        null=True,
                        verbose_name='Financiación',
                    ),
                ),
                (
                    'ayuda',
                    models.PositiveIntegerField(
                        blank=True,
                        default=0,
                        help_text='Las normas de la convocatoria establecen el importe máximo que se puede solicitar según el programa.',
                        null=True,
                        verbose_name='Ayuda económica solicitada',
                    ),
                ),
                (
                    'visto_bueno_centro',
                    models.BooleanField(null=True, verbose_name='Visto bueno del centro'),
                ),
                (
                    'visto_bueno_estudio',
                    models.BooleanField(
                        null=True, verbose_name='Visto bueno del plan de estudios'
                    ),
                ),
                (
                    'aceptacion_comision',
                    models.BooleanField(null=True, verbose_name='Aprobación por la comisión'),
                ),
                (
                    'ayuda_concedida',
                    models.PositiveIntegerField(
                        null=True, verbose_name='Ayuda económica concedida'
                    ),
                ),
                (
                    'tipo_gasto',
                    models.TextField(
                        help_text='Indicar los gastos autorizados indicados por la Comisión.',
                        null=True,
                        verbose_name='Tipo de gasto posible',
                    ),
                ),
                (
                    'observaciones',
                    models.TextField(
                        null=True, verbose_name='Observaciones para comunicar al coordinador'
                    ),
                ),
                (
                    'aceptacion_coordinador',
                    models.BooleanField(null=True, verbose_name='Aceptación por el coordinador'),
                ),
                (
                    'aceptacion_corrector',
                    models.BooleanField(null=True, verbose_name='Admisión por el corrector'),
                ),
                (
                    'es_publicable',
                    models.BooleanField(null=True, verbose_name='¿Publicar la memoria?'),
                ),
                (
                    'observaciones_corrector',
                    models.TextField(
                        null=True, verbose_name='Observaciones del corrector de la memoria'
                    ),
                ),
                (
                    'aceptacion_economico',
                    models.BooleanField(default=False, verbose_name='Cierre económico'),
                ),
                (
                    'centro',
                    models.ForeignKey(
                        blank=True,
                        help_text='Sólo obligatorio para PIEC y PIPOUZ.',
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='proyectos',
                        to='indo.centro',
                    ),
                ),
                (
                    'convocatoria',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to='indo.convocatoria'
                    ),
                ),
                (
                    'corrector',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='proyectos_corregidos',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'departamento',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to='indo.departamento',
                    ),
                ),
                (
                    'estudio',
                    models.ForeignKey(
                        blank=True,
                        help_text='Sólo obligatorio para PIET.',
                        limit_choices_to={'esta_activo': True},
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to='indo.estudio',
                    ),
                ),
                (
                    'evaluador',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='proyectos_evaluados',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'licencia',
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.PROTECT, to='indo.licencia'
                    ),
                ),
                (
                    'linea',
                    models.ForeignKey(
                        blank=True,
                        help_text='En su caso.',
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to='indo.linea',
                        verbose_name='Línea',
                    ),
                ),
                (
                    'programa',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to='indo.programa'
                    ),
                ),
            ],
            options={
                'permissions': [
                    ('listar_proyectos', 'Puede ver el listado de todos los proyectos.'),
                    ('ver_proyecto', 'Puede ver cualquier proyecto.'),
                    ('editar_proyecto', 'Puede editar cualquier proyecto en cualquier momento.'),
                    (
                        'listar_evaluaciones',
                        'Puede ver el listado de evaluaciones de los proyectos.',
                    ),
                    ('listar_evaluadores', 'Puede ver el listado de evaluadores.'),
                    ('editar_evaluador', 'Puede editar el evaluador de un proyecto.'),
                    (
                        'editar_resolucion',
                        'Puede modificar la resolución de la Comisión Evaluadora.',
                    ),
                    ('listar_correctores', 'Puede ver el listado de correctores.'),
                    ('editar_corrector', 'Puede modificar el corrector de un proyecto.'),
                    ('ver_evaluacion', 'Puede ver la evaluación de cualquier proyecto.'),
                    ('ver_memorias', 'Puede ver el listado y cualquier memoria de proyecto.'),
                    ('ver_up', 'Puede ver el listado de UP y gastos de los proyectos.'),
                    ('ver_economico', 'Puede ver/editar el cierre económico de los proyectos.'),
                ],
            },
        ),
        migrations.CreateModel(
            name='TipoEstudio',
            fields=[
                (
                    'id',
                    models.PositiveSmallIntegerField(
                        primary_key=True, serialize=False, verbose_name='Cód. tipo estudio'
                    ),
                ),
                ('nombre', models.CharField(max_length=63)),
            ],
        ),
        migrations.CreateModel(
            name='TipoParticipacion',
            fields=[
                ('nombre', models.CharField(max_length=63, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Valoracion',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('texto', models.TextField(blank=True, null=True, verbose_name='texto')),
                (
                    'criterio',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to='indo.criterio'
                    ),
                ),
                (
                    'opcion',
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.PROTECT, to='indo.opcion'
                    ),
                ),
                (
                    'proyecto',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='valoraciones',
                        to='indo.proyecto',
                    ),
                ),
            ],
            options={
                'verbose_name': 'valoración',
                'verbose_name_plural': 'valoraciones',
            },
        ),
        migrations.CreateModel(
            name='Registro',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('descripcion', models.CharField(max_length=255)),
                (
                    'evento',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to='indo.evento'
                    ),
                ),
                (
                    'proyecto',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to='indo.proyecto'
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('id_nk', models.PositiveSmallIntegerField(verbose_name='Cód. plan')),
                (
                    'nip_coordinador',
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name='NIP del coordinador'
                    ),
                ),
                (
                    'nombre_coordinador',
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name='nombre del coordinador',
                    ),
                ),
                (
                    'email_coordinador',
                    models.EmailField(
                        blank=True, max_length=254, null=True, verbose_name='email del coordinador'
                    ),
                ),
                ('esta_activo', models.BooleanField(default=True, verbose_name='¿Activo?')),
                (
                    'centro',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to='indo.centro'
                    ),
                ),
                (
                    'estudio',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='planes',
                        to='indo.estudio',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='ParticipanteProyecto',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'proyecto',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='participantes',
                        to='indo.proyecto',
                    ),
                ),
                (
                    'tipo_participacion',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to='indo.tipoparticipacion'
                    ),
                ),
                (
                    'usuario',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='vinculaciones',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='MemoriaSubapartado',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('peso', models.PositiveSmallIntegerField(verbose_name='peso')),
                ('descripcion', models.CharField(max_length=255, verbose_name='descripción')),
                ('ayuda', models.CharField(max_length=255, verbose_name='texto de ayuda')),
                (
                    'tipo',
                    models.CharField(
                        choices=[('texto', 'Texto libre'), ('fichero', 'Fichero')],
                        max_length=15,
                        verbose_name='tipo',
                    ),
                ),
                (
                    'apartado',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='subapartados',
                        to='indo.memoriaapartado',
                    ),
                ),
            ],
            options={
                'verbose_name': 'subapartado de la memoria',
                'verbose_name_plural': 'subapartados de la memoria',
                'ordering': ('apartado__numero', 'peso'),
            },
        ),
        migrations.CreateModel(
            name='MemoriaRespuesta',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('texto', models.TextField(blank=True, null=True, verbose_name='texto')),
                (
                    'fichero',
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to='anexos_memoria/%Y/',
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=['pdf']
                            )
                        ],
                        verbose_name='fichero PDF',
                    ),
                ),
                (
                    'proyecto',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='respuestas_memoria',
                        to='indo.proyecto',
                    ),
                ),
                (
                    'subapartado',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='respuestas',
                        to='indo.memoriasubapartado',
                    ),
                ),
            ],
            options={
                'verbose_name': 'respuesta de la memoria',
                'verbose_name_plural': 'respuestas de la memoria',
                'ordering': ('-proyecto__id', 'subapartado'),
            },
        ),
        migrations.AddField(
            model_name='linea',
            name='programa',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name='lineas',
                to='indo.programa',
            ),
        ),
        migrations.AddField(
            model_name='estudio',
            name='tipo_estudio',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to='indo.tipoestudio'
            ),
        ),
        migrations.AddConstraint(
            model_name='departamento',
            constraint=models.UniqueConstraint(
                fields=('academico_id_nk', 'rrhh_id_nk'), name='departamento-unique-academico-rrhh'
            ),
        ),
        migrations.AddField(
            model_name='criterio',
            name='convocatoria',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to='indo.convocatoria'
            ),
        ),
        migrations.AddConstraint(
            model_name='centro',
            constraint=models.UniqueConstraint(
                fields=('academico_id_nk', 'rrhh_id_nk'), name='centro-unique-academico-rrhh'
            ),
        ),
        migrations.AddConstraint(
            model_name='memoriarespuesta',
            constraint=models.UniqueConstraint(
                fields=('proyecto_id', 'subapartado_id'), name='unique-proyecto-subapartado'
            ),
        ),
        migrations.RunPython(migrate_permissions),
        migrations.RunPython(create_group),
        migrations.RunPython(add_permissions_to_groups),
        migrations.RunPython(indo_post_migrate_signal),  # not required?
    ]
